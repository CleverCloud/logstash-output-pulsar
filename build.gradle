import java.nio.file.Files
import java.nio.file.Paths
import static java.nio.file.StandardCopyOption.REPLACE_EXISTING
/*
 * Licensed to Elasticsearch under one or more contributor
 * license agreements. See the NOTICE file distributed with
 * this work for additional information regarding copyright
 * ownership. Elasticsearch licenses this file to you under
 * the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
apply plugin: "java"
apply plugin: 'maven'
apply plugin: "distribution"
apply plugin: "idea"

group "org.logstash.outputs"

sourceCompatibility = JavaVersion.VERSION_1_8

repositories {
  mavenCentral()
}

dependencies {
  compile 'org.apache.pulsar:pulsar-client-api:2.3.0'
  compile 'org.apache.pulsar:pulsar-client:2.3.0'
  compile 'org.apache.pulsar:protobuf-shaded:2.1.1-incubating'
  compile 'com.github.luben:zstd-jni:1.3.7-3'
  compile 'org.slf4j:slf4j-api:1.7.25'
  compile 'org.lz4:lz4-java:1.5.0'
  compile 'org.xerial.snappy:snappy-java:1.1.7.2'
}

task generateGemJarRequiresFile {
  doLast {
    File jars_file = file('lib/logstash-output-pulsar_jars.rb')
    jars_file.newWriter().withWriter { w ->
      w << "# AUTOGENERATED BY THE GRADLE SCRIPT. DO NOT EDIT.\n\n"
      w << "require \'jar_dependencies\'\n"
      configurations.runtime.allDependencies.each {
        w << "require_jar(\'${it.group}\', \'${it.name}\', \'${it.version}\')\n"
      }
    }
  }
}

task vendor {
  doLast {
    String vendorPathPrefix = "vendor/jar-dependencies"
    configurations.runtime.allDependencies.each { dep ->
      File f = configurations.runtime.filter { it.absolutePath.contains("${dep.group}/${dep.name}/${dep.version}") }.singleFile
      String groupPath = dep.group.replaceAll('\\.', '/')
      File newJarFile = file("${vendorPathPrefix}/${groupPath}/${dep.name}/${dep.version}/${dep.name}-${dep.version}.jar")
      newJarFile.mkdirs()
      Files.copy(f.toPath(), newJarFile.toPath(), REPLACE_EXISTING)
    }
  }
}

vendor.dependsOn(generateGemJarRequiresFile)
